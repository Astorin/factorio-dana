-- This file is part of Dana.
-- Copyright (C) 2020 Vincent Saulue-Laborde <vincent_saulue@hotmail.fr>
--
-- Dana is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- Dana is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with Dana.  If not, see <https://www.gnu.org/licenses/>.

local ClassLogger = require("lua/logger/ClassLogger")
local ErrorOnInvalidRead = require("lua/containers/ErrorOnInvalidRead")

local cLogger = ClassLogger.new{className = "AbstractTransform"}

local TypeToLocalisedStr
local TypeToSpritePrefix

-- Class holding the data of a transformation.
--
-- A transform is something (recipe, mining, electricity/heat generation...) that turns a given
-- set of Intermediates into another set of Intermediates.
--
-- RO Fields:
-- * ingredients: Set of Intermediates consumed by this transform.
-- * localisedName: A localised string of the form "[type] name".
-- * products: Set of Intermediates generated by this transform.
-- * rawPrototype: Factorio prototype corresponding to this transform.
-- * spritePath: Sprite path of the underlying prototype.
-- * type: Type of the wrapped rawPrototype. Usable to generate a sprite path.
--
local AbstractTransform = ErrorOnInvalidRead.new{
    -- Creates a new AbstractTransform object.
    --
    -- Args:
    -- * object: Table to turn into an AbstractTransform object.
    --
    new = function(object)
        cLogger:assertField(object, "ingredients")
        cLogger:assertField(object, "products")
        local rawPrototype = cLogger:assertField(object, "rawPrototype")
        local type = cLogger:assertField(object, "type")
        ErrorOnInvalidRead.setmetatable(object)
        object.localisedName = {"dana.model.transform.name", TypeToLocalisedStr[type], rawPrototype.localised_name}
        object.spritePath = TypeToSpritePrefix[type] .. "/" .. rawPrototype.name
        return object
    end,

    -- Restores the metatable of an AbstractTransform object, and all its owned objects.
    --
    -- Args:
    -- * object: table to modify.
    --
    setmetatable = function(object)
        ErrorOnInvalidRead.setmetatable(object)
        ErrorOnInvalidRead.setmetatable(object.ingredients)
        ErrorOnInvalidRead.setmetatable(object.products)
    end,

    -- Map[type] -> localised string.
    TypeToLocalisedStr = ErrorOnInvalidRead.new{
        boiler = {"dana.model.transform.boilerType"},
        fuel = {"dana.model.transform.fuelType"},
        recipe = {"dana.model.transform.recipeType"},
        resource = {"dana.model.transform.resourceType"},
        ["offshore-pump"] = {"dana.model.transform.offshorePumpType"},
    },

    -- Map[type] -> Prefix for spritePath.
    TypeToSpritePrefix = ErrorOnInvalidRead.new{
        boiler = "entity",
        fuel = "item",
        recipe = "recipe",
        resource = "entity",
        ["offshore-pump"] = "entity",
    },
}

TypeToLocalisedStr = AbstractTransform.TypeToLocalisedStr
TypeToSpritePrefix = AbstractTransform.TypeToSpritePrefix

return AbstractTransform
